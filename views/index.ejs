
    <%- include ('partials/header'); %>

    

    <div class="big-wrapper">
       
       
        <div class="chat-wrapper">
            <div class="super-chat-title-container">
                <header>
                    <h1>Super Video Chat</h1>
                </header>
            </div>
            <div class="vidcontainer">
                <div class="row">
                    <div class="videocolumn1">
                        remote
                        <video id="rVideo" autoplay="autoplay"></video>
                    </div>
                    <div class="videocolumn2">
                        local
                        <video id="lVideo" autoplay="autoplay" muted>
                    </div>
                </div>
                <hr>
                <hr>
                <div class="row2">
                    <span id="displayId"></span>

                    <input type="text" id="connId" class="form-control" placeholder="enter a connection id" required>

                    <button id="conn_button" class="btn" type="submit">Connect</button>

                    <button id="call_button" class="btn" type="submit">Call</button>
                </div>
            </div>
        
        </div>
    </div>
    
    <script src="https://unpkg.com/peerjs@1.2.0/dist/peerjs.min.js"></script>
    <script> 
        
        function getLVideo(callbacks) {
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitgetUserMedia || navigator.mozgetUserMedia
         
            var constraints = {
         
                audio: true,
                video: true
            }
         
            navigator.getUserMedia(constraints, callbacks.success, callbacks.error)
        }
         
        function recStream(stream, elemid) {
            var video = document.getElementById(elemid);
            video.srcObject = stream;
         
            window.peer_stream = stream;
         
        }
         
        getLVideo({
            success: function (stream) {
                window.localstream = stream;
                recStream(stream, 'lVideo');
            },
            error: function (error) {
                alert("cannot acces your camera");
                console.log(error);
            }
        });
         
        var conn;
        var peer_id;
         
         
         
        var peer = new Peer();
         
         
        peer.on('open', function () {
            document.getElementById("displayId").innerHTML = peer.id;
        });
         
        peer.on('connection', function (connection) {
            conn = connection;
            peer_id = connection.peer;
            document.getElementById('connId').value = peer_id;
        });
         
        peer.on('error', function (error) {
            alert("an error has happened: " + error);
            console.log(error);
        });
         
         
         
        document.getElementById('conn_button').addEventListener('click', function () {
            peer_id = document.getElementById('connId').value;
         
            if (peer_id) {
                conn = peer.connect(peer_id);
                alert("connected to peer");
            } else {
                alert("enter an id");
                return false;
            }
        });
         
         
        peer.on('call', function (call) {
            
                call.answer(window.localstream);
                call.on('stream', function (stream) {
                    window.peer_stream = stream;
                    recStream(stream, 'rVideo');
                });
         
                call.on('close', function () {
                    alert('call has behind');
                });
            });
         
         
         
        document.getElementById('call_button').addEventListener('click', function () {
            console.log("calling a peer: " + peer_id);
            console.log(peer);
            var call = peer.call(peer_id, window.localstream);
         
            call.on('stream', function (stream) {
                window.peer_stream = stream;
                recStream(stream, 'rVideo');
            });
        });
         
        
        const keepTheChatRoomToTheBottom = () => {
            const chatroom = document.getElementById('chatroom');
            chatroom.scrollTop = chatroom.scrollHeight - chatroom.clientHeight;
        }
         
        
        </script>
</body>

</html>